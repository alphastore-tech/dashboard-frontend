# .github/workflows/notify-slack.yml
name: Notify Slack on Successful Deploy

on:
  workflow_run:
    workflows: ["Deploy to EC2"]        # 배포 워크플로 이름
    types: [completed]

jobs:
  slack-notify:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    #──────────────────────────────────────────────────────────────
    # 1) 최신 릴리스(가장 최근 tag) 정보 가져오기
    #──────────────────────────────────────────────────────────────
    - name: Get latest release
      id: release
      uses: actions/github-script@v7
      with:
        script: |
          const {data: releases} = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo:  context.repo.repo,
            per_page: 1
          });
          const latest = releases[0];
          core.setOutput('version',  (latest.tag_name||'').replace(/^v/, ''));
          core.setOutput('notes',    latest.body || '(no release notes)');
          core.setOutput('url',      latest.html_url);

    #──────────────────────────────────────────────────────────────
    # 2) 한국 시간 포매팅
    #──────────────────────────────────────────────────────────────
    - name: Format Korea time
      id: ktime
      run: |
        echo "kst=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M KST')" >> "$GITHUB_OUTPUT"

    #──────────────────────────────────────────────────────────────
    # 3) Slack Webhook 메시지 전송
    #──────────────────────────────────────────────────────────────
    - name: Post to Slack (Incoming Webhook)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # 릴리스 노트에서 따옴표/백틱 이스케이프 및 줄바꿈 → \n
        notes=$(printf '%s' "${{ steps.release.outputs.notes }}" \
                | sed 's/\\/\\\\/g; s/"/\\"/g; s/`/\\`/g; s/$/\\n/' )
        cat >payload.json <<EOF
        {
          "text": ":rocket: Prod Deploy v${{ steps.release.outputs.version }} Succeeded",
          "blocks": [
            { "type": "section",
              "text": { "type": "mrkdwn", "text": ":rocket: *Prod Deploy Succeeded*" } },
            { "type": "section",
              "fields": [
                { "type": "mrkdwn", "text": "*Deployer:*\\n${{ github.event.workflow_run.actor.login }}" },
                { "type": "mrkdwn", "text": "*Version:*\\n\`${{ steps.release.outputs.version }}\`" },
                { "type": "mrkdwn", "text": "*When:*\\n${{ steps.ktime.outputs.kst }}" },
                { "type": "mrkdwn", "text": "*Prod URL:*\\n<https://alphastore-dashboard.be>" }
              ] },
            { "type": "section",
              "text": { "type": "mrkdwn", 
                        "text": "*Changes:*\\n${notes}" } }
          ]
        }
        EOF
        curl -X POST -H 'Content-Type: application/json' \
             -d @payload.json "$SLACK_WEBHOOK_URL"
